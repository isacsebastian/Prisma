
<style>

.carousel-preview *,
.carousel-preview *:hover,
.carousel-preview *:active,
.carousel-preview *:focus {
    outline: none !important;
    box-shadow: none !important;
}

.carousel-preview .carousel-button:hover,
.carousel-preview .carousel-button:active,
.carousel-preview .carousel-button:focus {
    background-color: rgba(255, 255, 255, 0.9) !important;
    color: #333 !important;
}

.carousel-preview .follow-button:hover,
.carousel-preview .follow-button:active,
.carousel-preview .follow-button:focus {
    background-color: rgba(255, 255, 255, 0.9) !important;
    color: #333 !important;
}

/* ESTILOS PRINCIPALES DEL CAROUSEL */
.carousel-preview {
    width: 100%;/*
    height: 70vh;*/
    align-items: center;
    justify-content: center;
    display: flex;
    background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
    padding: 60px;
}

.portfolio-container {
    max-width: 100%;
    width: 80%;
    margin: 0 auto;
    background: linear-gradient(145deg, #1e1e1e, #0a0a0a);
    border-radius: 24px;
    padding: 20px!important;
    box-shadow: 
        0 25px 50px rgba(0, 0, 0, 0.5),
        0 0 0 1px rgba(255, 255, 255, 0.05),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
}

.portfolio-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.03) 0%, transparent 70%);
    pointer-events: none;
}

.profile-container {
    display: flex;
    align-items: center;
    margin-bottom: 3rem;
    position: relative;
    z-index: 2;
}

.profile-image {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1.5rem;
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
}

.profile-image:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    border-color: rgba(255, 255, 255, 0.2);
}

.profile-image img {
    width: 50px;
    height: 50px;/*
    border-radius: 50%;*/
    object-fit: contain;
}

.profile-info h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: #ffffff;
    font-weight: 600;
    letter-spacing: 0.5px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.follow-button {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
    color: #333;
    border: none;
    border-radius: 25px;
    padding: 0.6rem 1.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
}

.follow-button:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.8)) !important;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    color: #333 !important;
}

.follow-button:active, 
.follow-button.active {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.6)) !important;
    transform: translateY(0);
    color: #333 !important;
}

.carousel-container {
    position: relative;
    width: 100%;
    margin: 0 auto;
    overflow: hidden;
    border-radius: 16px;
    background: rgba(0, 0, 0, 0.2);
    padding: 1rem;
}

.carousel-track {
    display: flex;
    transition: transform 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    gap: 1.5rem;
}

.carousel-slide {
    flex: 0 0 calc(33.333% - 1rem);
    min-width: 300px;
    position: relative;
    border-radius: 16px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    text-decoration: none;
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
    box-shadow: 
        0 8px 25px rgba(0, 0, 0, 0.3),
        0 0 0 1px rgba(255, 255, 255, 0.1);
}

.carousel-slide:hover {
    transform: translateY(-12px) scale(1.02);
    box-shadow: 
        0 20px 40px rgba(0, 0, 0, 0.4),
        0 0 0 1px rgba(255, 255, 255, 0.2),
        0 0 30px rgba(255, 255, 255, 0.1);
}

.carousel-slide::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
}

.carousel-slide:hover::before {
    opacity: 1;
}

.carousel-slide img {
    width: 100%;
    height: 260px;
    object-fit: cover;
    display: block;
    transition: transform 0.6s ease;
    filter: brightness(0.9) contrast(1.1);
}

.carousel-slide:hover img {
    transform: scale(1.05);
    filter: brightness(1) contrast(1.2);
}

.slide-content {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 2rem;
    background: linear-gradient(
        to top, 
        rgba(0, 0, 0, 0.9) 0%, 
        rgba(0, 0, 0, 0.7) 50%, 
        rgba(0, 0, 0, 0.3) 80%,
        transparent 100%
    );
    color: white;
    z-index: 2;
    transition: all 0.3s ease;
}

.carousel-slide:hover .slide-content {
    padding: 2.5rem 2rem;
    background: linear-gradient(
        to top, 
        rgba(0, 0, 0, 0.95) 0%, 
        rgba(0, 0, 0, 0.8) 50%, 
        rgba(0, 0, 0, 0.4) 80%,
        transparent 100%
    );
}

.slide-content h3 {
    font-size: 1.4rem;
    margin-bottom: 0.8rem;
    font-weight: 600;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.7);
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
}

.carousel-slide:hover .slide-content h3 {
    transform: translateY(-4px);
    color: #ffffff;
}

.slide-content p {
    font-size: 1rem;
    opacity: 0.9;
    line-height: 1.4;
    text-shadow: 0 1px 4px rgba(0, 0, 0, 0.8);
    transition: all 0.3s ease;
}

.carousel-slide:hover .slide-content p {
    opacity: 1;
    transform: translateY(-2px);
}

.carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
    border-radius: 50%;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.3rem;
    color: #333;
    z-index: 10;
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    box-shadow: 
        0 6px 20px rgba(0, 0, 0, 0.3),
        0 0 0 1px rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
}

.carousel-button:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.8)) !important;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 
        0 8px 25px rgba(0, 0, 0, 0.4),
        0 0 0 1px rgba(255, 255, 255, 0.3);
    color: #333 !important;
}

.carousel-button:active,
.carousel-button.active {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.6)) !important;
    transform: translateY(-50%) scale(0.95);
    color: #333 !important;
}

.prev-button {
    left: 15px;
}

.next-button {
    right: 15px;
}

/* RESPONSIVE MEJORADO */
@media (max-width: 768px) {
    .carousel-preview {
        height: auto;
        min-height: 60vh;
        padding: 1rem 0;
    }
    
    .portfolio-container {
        padding: 2rem;
        margin: 1rem;
        width: calc(100% - 2rem);
    }
    
    .profile-container {
        margin-bottom: 2rem;
    }
    
    .profile-image {
        width: 60px;
        height: 60px;
        margin-right: 1rem;
    }
    
    .profile-info h2 {
        font-size: 1.3rem;
    }
    
    .carousel-slide {
        flex: 0 0 calc(50% - 0.75rem);
        min-width: 250px;
    }
    
    .carousel-slide img {
        height: 220px;
    }
    
    .slide-content {
        padding: 1.5rem;
    }
    
    .slide-content h3 {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
    }
    
    .slide-content p {
        font-size: 0.9rem;
    }
    
    .carousel-button {
        width: 45px;
        height: 45px;
        font-size: 1.1rem;
    }
}

@media (max-width: 480px) {
    .portfolio-container {
        padding: 1.5rem;
    }
    
    .profile-container {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    
    .profile-image {
        margin-right: 0;
    }
    
    .carousel-slide {
        flex: 0 0 100%;
        min-width: 100%;
    }
    
    .carousel-slide img {
        height: 200px;
    }
    
    .carousel-track {
        gap: 1rem;
    }
    
    .carousel-button {
        width: 40px;
        height: 40px;
        font-size: 1rem;
    }
    
    .prev-button {
        left: 10px;
    }
    
    .next-button {
        right: 10px;
    }
}

/* ANIMACIONES ADICIONALES */
@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.portfolio-container {
    animation: slideIn 0.8s ease-out;
}

.carousel-slide {
    animation: slideIn 0.6s ease-out backwards;
}

.carousel-slide:nth-child(1) { animation-delay: 0.1s; }
.carousel-slide:nth-child(2) { animation-delay: 0.2s; }
.carousel-slide:nth-child(3) { animation-delay: 0.3s; }
.carousel-slide:nth-child(4) { animation-delay: 0.4s; }
.carousel-slide:nth-child(5) { animation-delay: 0.5s; }

/* ESTADOS DE FOCUS PARA ACCESIBILIDAD */
.carousel-button:focus-visible {
    outline: 2px solid rgba(255, 255, 255, 0.8);
    outline-offset: 2px;
}

.carousel-slide:focus-visible {
    outline: 2px solid rgba(255, 255, 255, 0.6);
    outline-offset: 4px;
}
</style>

<script>
// LÓGICA DEL CAROUSEL - JavaScript puro
document.addEventListener('DOMContentLoaded', function() {
    // Selección de elementos del DOM
    const track = document.querySelector('.carousel-track');
    const slides = Array.from(track.children);
    const nextButton = document.querySelector('.next-button');
    const prevButton = document.querySelector('.prev-button');
    const followButton = document.querySelector('.follow-button');
    
    // Variables de control del carousel
    let slideWidth = 0;
    let slideIndex = 0;
    let slidesToShow = 3;
    const slideCount = slides.length;
    let isAnimating = false;
    
    // Función para calcular slides visibles según el ancho de pantalla
    function calculateSlidesToShow() {
        const windowWidth = window.innerWidth;
        if (windowWidth < 480) {
            return 1;
        } else if (windowWidth < 768) {
            return 2;
        } else {
            return 3;
        }
    }
    
    // Función para calcular el ancho de los slides
    function calculateSlideWidth() {
        if (slides.length > 0) {
            const slideRect = slides[0].getBoundingClientRect();
            const trackRect = track.getBoundingClientRect();
            const gap = 24; // Gap entre slides (1.5rem = 24px)
            
            slideWidth = slideRect.width + gap;
            slidesToShow = calculateSlidesToShow();
        }
    }
    
    // Función principal para mover el carousel
    function moveToSlide(targetIndex, smooth = true) {
        if (isAnimating) return;
        
        // Validar límites
        const maxIndex = Math.max(0, slideCount - slidesToShow);
        
        if (targetIndex < 0) {
            slideIndex = 0;
        } else if (targetIndex > maxIndex) {
            slideIndex = maxIndex;
        } else {
            slideIndex = targetIndex;
        }
        
        // Aplicar transformación
        const translateX = slideIndex * slideWidth;
        
        if (smooth) {
            isAnimating = true;
            track.style.transition = 'transform 0.6s cubic-bezier(0.25, 0.8, 0.25, 1)';
            
            // Liberar animación después de completarse
            setTimeout(() => {
                isAnimating = false;
            }, 600);
        } else {
            track.style.transition = 'none';
        }
        
        track.style.transform = `translateX(-${translateX}px)`;
        
        // Actualizar estado de botones
        updateButtonStates();
    }
    
    // Función para actualizar el estado visual de los botones
    function updateButtonStates() {
        const maxIndex = Math.max(0, slideCount - slidesToShow);
        
        // Deshabilitar/habilitar botones según posición
        if (slideIndex <= 0) {
            prevButton.style.opacity = '0.5';
            prevButton.style.pointerEvents = 'none';
        } else {
            prevButton.style.opacity = '1';
            prevButton.style.pointerEvents = 'auto';
        }
        
        if (slideIndex >= maxIndex) {
            nextButton.style.opacity = '0.5';
            nextButton.style.pointerEvents = 'none';
        } else {
            nextButton.style.opacity = '1';
            nextButton.style.pointerEvents = 'auto';
        }
    }
    
    // Función para manejar el redimensionamiento de ventana
    function handleResize() {
        calculateSlideWidth();
        moveToSlide(slideIndex, false); // Sin animación en resize
    }
    
    // Función para agregar efecto de botón presionado
    function addButtonPressEffect(button) {
        button.classList.add('active');
        setTimeout(() => {
            button.classList.remove('active');
        }, 300);
    }
    
    // Event Listeners
    
    // Botón siguiente
    if (nextButton) {
        nextButton.addEventListener('click', function(e) {
            e.preventDefault();
            moveToSlide(slideIndex + 1);
            addButtonPressEffect(this);
        });
    }
    
    // Botón anterior
    if (prevButton) {
        prevButton.addEventListener('click', function(e) {
            e.preventDefault();
            moveToSlide(slideIndex - 1);
            addButtonPressEffect(this);
        });
    }
    
    // Botón de seguir (si existe)
    if (followButton) {
        followButton.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Alternar texto del botón
            const currentText = this.textContent.trim();
            if (currentText === 'Siguiendo' || currentText === 'Following') {
                this.textContent = 'Seguir';
            } else if (currentText === 'Seguir' || currentText === 'Follow') {
                this.textContent = 'Siguiendo';
            } else {
                // Texto por defecto si no coincide
                this.textContent = 'Siguiendo';
            }
            
            // Efecto visual de clic
            addButtonPressEffect(this);
        });
    }
    
    // Redimensionamiento de ventana con debounce
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(handleResize, 250);
    });
    
    // Navegación por teclado
    document.addEventListener('keydown', function(e) {
        // Solo funcionar si el carousel está en focus
        const carouselContainer = document.querySelector('.carousel-container');
        if (!carouselContainer.contains(document.activeElement)) return;
        
        switch(e.key) {
            case 'ArrowLeft':
                e.preventDefault();
                moveToSlide(slideIndex - 1);
                break;
            case 'ArrowRight':
                e.preventDefault();
                moveToSlide(slideIndex + 1);
                break;
            case 'Home':
                e.preventDefault();
                moveToSlide(0);
                break;
            case 'End':
                e.preventDefault();
                moveToSlide(slideCount - slidesToShow);
                break;
        }
    });
    
    // Soporte básico para touch/swipe en móviles
    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartY = 0;
    let touchEndY = 0;
    
    if (track) {
        track.addEventListener('touchstart', function(e) {
            touchStartX = e.changedTouches[0].screenX;
            touchStartY = e.changedTouches[0].screenY;
        }, { passive: true });
        
        track.addEventListener('touchend', function(e) {
            touchEndX = e.changedTouches[0].screenX;
            touchEndY = e.changedTouches[0].screenY;
            
            const deltaX = touchStartX - touchEndX;
            const deltaY = Math.abs(touchStartY - touchEndY);
            
            // Solo procesar swipe horizontal si es mayor que vertical
            if (Math.abs(deltaX) > deltaY && Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                    // Swipe izquierda - siguiente
                    moveToSlide(slideIndex + 1);
                } else {
                    // Swipe derecha - anterior
                    moveToSlide(slideIndex - 1);
                }
            }
        }, { passive: true });
    }
    
    // Funciones de utilidad para uso externo (opcional)
    
    // Función para ir a un slide específico
    window.goToSlide = function(index) {
        moveToSlide(index);
    };
    
    // Función para obtener información del carousel
    window.getCarouselInfo = function() {
        return {
            currentSlide: slideIndex,
            totalSlides: slideCount,
            slidesToShow: slidesToShow,
            maxSlide: slideCount - slidesToShow
        };
    };
    
    // Función para auto-play (uso opcional)
    let autoPlayInterval;
    
    window.startAutoPlay = function(intervalMs = 5000) {
        stopAutoPlay(); // Limpiar cualquier intervalo existente
        
        autoPlayInterval = setInterval(() => {
            const maxIndex = slideCount - slidesToShow;
            const nextIndex = slideIndex >= maxIndex ? 0 : slideIndex + 1;
            moveToSlide(nextIndex);
        }, intervalMs);
    };
    
    window.stopAutoPlay = function() {
        if (autoPlayInterval) {
            clearInterval(autoPlayInterval);
            autoPlayInterval = null;
        }
    };
    
    // Pausar auto-play en hover (si está activado)
    if (track) {
        track.addEventListener('mouseenter', () => {
            if (autoPlayInterval) {
                stopAutoPlay();
            }
        });
        
        track.addEventListener('mouseleave', () => {
            // Reanudar auto-play si estaba activo
            // Esta lógica se puede personalizar según necesidades
        });
    }
    
    // INICIALIZACIÓN
    function initCarousel() {
        calculateSlideWidth();
        moveToSlide(0, false); // Posición inicial sin animación
        
        // Hacer el carousel accesible
        if (track) {
            track.setAttribute('role', 'region');
            track.setAttribute('aria-label', 'Carousel de proyectos');
        }
        
        // Añadir atributos de accesibilidad a los slides
        slides.forEach((slide, index) => {
            slide.setAttribute('role', 'group');
            slide.setAttribute('aria-label', `Slide ${index + 1} de ${slideCount}`);
        });
        
        console.log('Carousel inicializado correctamente');
        console.log(`Total de slides: ${slideCount}, Slides visibles: ${slidesToShow}`);
    }
    
    // Inicializar cuando el DOM esté listo
    initCarousel();
});
</script>
